#!/bin/bash

# Define the input image
GRAY_IMAGE="input/gray_plushie.png"
COLOR_IMAGE="input/color_plushie.png"

# Define base text cases (ID=2: long, ID=10: short)
declare -A TEXTS
TEXTS6="https://check007.net/Tag/Check/c67a6602-f5f0-4e1f-8de2-578b1151fbeb"
TEXTS10="TSMC_TO_THE_MOON::TSMC_TO_THE_MOON"

# Versions to test
VERSIONS=(1 2 3 4 5 6 7 8 9 10)

# block size
BLOCKS=(3 5)

# Drop ratio
DROP_RATIOS=(0 0.05 0.1)

# Halftone flag (boolean: 0 or 1)
HALFTONE_FLAGS=(0 1)

# Output directory
OUTPUT_DIR="output"
mkdir -p "$OUTPUT_DIR"

for TEXT_ID in 6 10; do
    TEXT_VAR="TEXTS${TEXT_ID}"
    TEXT="${!TEXT_VAR}"

    # compare different length of text can be generated by different version of QR code
    for VERSION in "${VERSIONS[@]}"; do
        # Construct output file name
        OUTPUT_FILE="$OUTPUT_DIR/TEXT_LENGTH_qrcode_ID${TEXT_ID}_v${VERSION}.png"
        
        echo "Generating TEXT_LENGTH QR Code: ID=$TEXT_ID, Version=$VERSION"

        python main.py \
            -t "$TEXT" \
            -i "$GRAY_IMAGE" \
            -o "$OUTPUT_FILE" \
            -v "$VERSION" \
            -b 3
    done
done

# check halftone or not, blocksize and drop ratio's setting
for HALFTONE in "${HALFTONE_FLAGS[@]}"; do
    for BLOCK in "${BLOCKS[@]}"; do
        for DROP_RATIO in "${DROP_RATIOS[@]}"; do
            # Construct output file name
            OUTPUT_FILE="$OUTPUT_DIR/gray_qrcode_b${BLOCK}_d${DROP_RATIO}_h${HALFTONE}.png"
            
            echo "Generating gray QR Code: Block=$BLOCK, Drop=$DROP_RATIO, Halftone=$HALFTONE"

            # Run Python script with halftone option if HALFTONE == 1
            if [ "$HALFTONE" -eq 1 ]; then
                python main.py \
                    -t "$TEXTS10" \
                    -i "$GRAY_IMAGE" \
                    -o "$OUTPUT_FILE" \
                    -v 6 \
                    -b "$BLOCK" \
                    -d "$DROP_RATIO" \
                    --edge-enhance
            else
                python main.py \
                    -t "$TEXTS10" \
                    -i "$GRAY_IMAGE" \
                    -o "$OUTPUT_FILE" \
                    -v 6 \
                    -b "$BLOCK" \
                    -d "$DROP_RATIO" \
                    --wo-halftone \
                    --edge-enhance
            fi

            # Construct output file name
            OUTPUT_FILE="$OUTPUT_DIR/color_qrcode_b${BLOCK}_d${DROP_RATIO}_h${HALFTONE}.png"
            
            echo "Generating color QR Code: Block=$BLOCK, Drop=$DROP_RATIO, Halftone=$HALFTONE"

            # Run Python script with halftone option if HALFTONE == 1
            if [ "$HALFTONE" -eq 1 ]; then
                python main.py \
                    -t "$TEXTS10" \
                    -i "$COLOR_IMAGE" \
                    -o "$OUTPUT_FILE" \
                    -v 6 \
                    -b "$BLOCK" \
                    -d "$DROP_RATIO" \
                    --color \
                    --edge-enhance
            else
                python main.py \
                    -t "$TEXTS10" \
                    -i "$COLOR_IMAGE" \
                    -o "$OUTPUT_FILE" \
                    -v 6 \
                    -b "$BLOCK" \
                    -d "$DROP_RATIO" \
                    --wo-halftone \
                    --color \
                    --edge-enhance
            fi
        done
    done
done

# Loop over text IDs and versions
# for TEXT_ID in 6 10; do
#     TEXT_VAR="TEXTS${TEXT_ID}"
#     TEXT="${!TEXT_VAR}"  # ✅ Indirect variable expansion
    
#     for VERSION in "${VERSIONS[@]}"; do
#         for BLOCK in "${BLOCKS[@]}"; do
#             for DROP_RATIO in "${DROP_RATIOS[@]}"; do
#                 for HALFTONE in "${HALFTONE_FLAGS[@]}"; do
#                     # Construct output file name
#                     OUTPUT_FILE="$OUTPUT_DIR/gray_qrcode_ID${TEXT_ID}_v${VERSION}_b${BLOCK}_d${DROP_RATIO}_h${HALFTONE}.png"
                    
#                     echo "Generating gray QR Code: ID=$TEXT_ID, Version=$VERSION, Block=$BLOCK, Drop=$DROP_RATIO, Halftone=$HALFTONE"

#                     # Run Python script with halftone option if HALFTONE == 1
#                     if [ "$HALFTONE" -eq 1 ]; then
#                         python main.py \
#                             -t "$TEXT" \
#                             -i "$GRAY_IMAGE" \
#                             -o "$OUTPUT_FILE" \
#                             -v "$VERSION" \
#                             -b "$BLOCK" \
#                             -d "$DROP_RATIO"
#                     else
#                         python main.py \
#                             -t "$TEXT" \
#                             -i "$GRAY_IMAGE" \
#                             -o "$OUTPUT_FILE" \
#                             -v "$VERSION" \
#                             -b "$BLOCK" \
#                             -d "$DROP_RATIO" \
#                             --wo-halftone
#                     fi
#                 done
#             done
#         done
#     done
# done

# for TEXT_ID in 6 10; do
#     TEXT_VAR="TEXTS${TEXT_ID}"
#     TEXT="${!TEXT_VAR}"  # ✅ Indirect variable expansion
    
#     for VERSION in "${VERSIONS[@]}"; do
#         for BLOCK in "${BLOCKS[@]}"; do
#             for DROP_RATIO in "${DROP_RATIOS[@]}"; do
#                 for HALFTONE in "${HALFTONE_FLAGS[@]}"; do
#                     # Construct output file name
#                     OUTPUT_FILE="$OUTPUT_DIR/color_qrcode_ID${TEXT_ID}_v${VERSION}_b${BLOCK}_d${DROP_RATIO}_h${HALFTONE}.png"
                    
#                     echo "Generating rgb QR Code: ID=$TEXT_ID, Version=$VERSION, Block=$BLOCK, Drop=$DROP_RATIO, Halftone=$HALFTONE"

#                     # Run Python script with halftone option if HALFTONE == 1
#                     if [ "$HALFTONE" -eq 1 ]; then
#                         python main.py \
#                             -t "$TEXT" \
#                             -i "$COLOR_IMAGE" \
#                             -o "$OUTPUT_FILE" \
#                             -v "$VERSION" \
#                             -b "$BLOCK" \
#                             -d "$DROP_RATIO" \
#                             --color
#                     else
#                         python main.py \
#                             -t "$TEXT" \
#                             -i "$COLOR_IMAGE" \
#                             -o "$OUTPUT_FILE" \
#                             -v "$VERSION" \
#                             -b "$BLOCK" \
#                             -d "$DROP_RATIO" \
#                             --wo-halftone \
#                             --color
#                     fi
#                 done
#             done
#         done
#     done
# done

echo "✅ All experiments completed."